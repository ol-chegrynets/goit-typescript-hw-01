{
  "compilerOptions": {
    "target": "ESNext", // Set the JavaScript language version for emitted JavaScript and include compatible library declarations.
    "module": "ESNext", // Use ES module system (suitable for modern browsers and tooling).
    "lib": ["DOM", "ESNext", "DOM.Iterable"], // Specify library files to be included in the compilation.
    "esModuleInterop": true, // Enables compilation away from module statements that aren't ECMAScript-compliant.
    "forceConsistentCasingInFileNames": true, // Disallow inconsistently-cased references to the same file.
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Advanced Options */
    "outDir": "./dist", // Redirect output structure to the directory.
    "sourceMap": true, // Generates corresponding '.map' file.

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
// Блок compilerOptions містить налаштування компілятора, тобто правила за якими TS буде трансформовано в JS.

// baseUrl: Якщо ваш проєкт має складну структуру, і ви не хочете прописувати повний шлях, як app/javascript/react/Component під час імпорту, ви можете використовувати baseUrl для спрощення імпорту, наприклад, react/Component. У цьому разі baseUrl буде app/javascript.

// outDir: Каталог, де зберігаються скомпільовані файли.

// rootDir: Коренева папка проєкту, у якій знаходиться основний файл.

// target: Визначає версію ECMAScript, яка використовується для генерації вихідного коду. Наприклад, якщо вказати es5, компільований файл не матиме команд const і let та інших нових функцій, які були додані до es6, але код буде підтримуватися старими браузерами.

// ESNext генерує код, який відповідає останній версії ECMAScript.
// У сучасному світі можна починати з версії es2019 і вище.

// module: Визначає систему модулів для використання. commonjs — стандартна система модулів для Node.js. Але ES2020 або ES2022 краще підходить для розробки на клієнтській стороні.

// strict: Включає всі суворі перевірки типів у TypeScript. Це допомагає уникнути багатьох поширених помилок коду.

// lib: Визначає, які бібліотеки слід використовувати. Якщо передати порожній масив у lib, у нашому коді буде недоступний навіть console.log. У lib потрібно вказати мінімально необхідну версію JavaScript, наприклад ["ES2021"].

// allowJs: Дозволяє компілятору TypeScript обробляти файли JavaScript. Це може бути корисно, якщо ви мігруєте проєкт, написаний на JavaScript і переписується на TypeScript. Після завершення міграції це налаштування зазвичай ставлять у false.

// esModuleInterop: Дозволяє імпортувати модулі CommonJS так, ніби вони були б ES6-модулями. Це означає, що якщо у нас є якась бібліотека, яка використовує CommonJS, нам доведеться писати так:

// import * as express from 'express';

// З esModuleInterop ми можемо імпортувати модулі більш природним для ES6 способом:

// import express from 'express';

// allowSyntheticDefaultImports: Працює у зв’язці з esModuleInterop і дозволяє запобіганню помилок, які виникають під час збірки через несумісності SystemJS і CommonJS. Це налаштування стосується типів.

// experimentalDecorators: Якщо увімкнути цю опцію, TypeScript дозволятиме використання декораторів у вашому коді.

// emitDecoratorMetadata: Це налаштування, що використовується у зв’язці з experimentalDecorators, додає метадані до декораторів.

// isolatedModules: Гарантує, що кожен файл буде розглядатися як окремий модуль, буде неможливо створити файл і щось експортувати з нього. Увімкнено за замовчуванням під час створення проєкту через Create React App. Якщо увімкнено — ви не зможете використовувати const enum у коді.

// preserveConstEnums: Якщо preserveConstEnums встановлено в true, TypeScript зберігає константні перерахування у згенерованому коді JavaScript, коли увімкнено isolatedModules.

// moduleResolution: Визначає стратегію розділення модулів. Доступні два значення: "node" і "classic". Оскільки наші пакети встановлені через npm, найкращим вибором є node.

// skipLibCheck: Вимикає перевірку типів у бібліотеках node_modules. Зазвичай встановлюється в true для пришвидшення компіляції.

// strictNullChecks: TypeScript не дозволить вам використовувати значення null або undefined, де очікується об'єкт. Це допомагає запобігти багатьом поширеним помилкам, оскільки null і undefined є основними джерелами помилок у JavaScript.

// types: Дозволяє задати власні глобальні типи.

// sourceMap: Чи створювати файли source map.

// jsx: Відповідає за обробку синтаксису JSX. Вам знадобиться значення "react" або "react-jsx", додане в TypeScript 4.1 для підтримки нового JSX Transform, введеного в React 17.

// І декілька параметрів, які записуються поза блоком compilerOptions:

// include: Визначає, які файли слід включити до процесу компіляції. Наприклад, ви можете включити всі файли TypeScript за допомогою ["**/*.ts", "**/*.tsx"].

// exclude: За замовчуванням, якщо значення не задано, до нього включається "node_modules". Якщо потрібно виключити певні файли чи каталоги, потрібно вручну додати "node_modules". Якщо ви бажаєте виключити певні типи файлів з усіх папок, наприклад тести, ви можете вказати "**/*.spec.ts". Тоді буде ["./node_modules", "**/*.spec.ts"].
